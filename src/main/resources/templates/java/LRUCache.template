package {pkg};

import com.hightower.dailypractice.core.NotImplemented;

/**
{description}
 */
public class LRUCache {

    /**
     * Initializes an LRU cache of size `capacity`.
     */
    @NotImplemented
    public LRUCache(int capacity) {
    }

    /**
     * Return the value corresponding to the `key` if the `key` exists, otherwise return `-1`.
     */
    @NotImplemented
    public int get(int key) {
        return -1;
    }

    /**
     * Update the `value` of the `key` if the `key` exists. Otherwise, add the `key`-`value` pair
     * to cache. If the introduction of the new pair causes the cache to exceed its capacity, remove the least
     * recently used key.
     */
    @NotImplemented
    public void put(int key, int value) {

    }

}